require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"boot":[function(require,module,exports){
var App, Game, app, eventToMousePos,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Game = require('game');

eventToMousePos = function(event, elem) {
  var isTouch, pos;
  if (elem === void 0) {
    elem = document.body;
  }
  isTouch = false;
  pos = {
    x: 0,
    y: 0
  };
  if (event.touches) {
    if (event.touches.length) {
      isTouch = true;
      pos.x = parseInt(event.touches[0].clientX);
      pos.y = parseInt(event.touches[0].clientY);
    }
  } else {
    pos.x = parseInt(event.clientX);
    pos.y = parseInt(event.clientY);
  }
  pos.x -= elem.clientLeft;
  pos.y -= elem.clientTop;
  return pos;
};

App = (function() {
  function App() {
    this.isPhone = !!window.cordova;
    this.isTouchSupported = indexOf.call(window, "ontouchstart") >= 0;
    this.dragging = false;
    this.boundRender = this.render.bind(this);
    this.pendingImages = 0;
    if (this.isTouchSupported) {
      this.eventNames = {
        down: 'touchstart',
        move: 'touchmove',
        up: 'touchend'
      };
    } else {
      this.eventNames = {
        down: 'mousedown',
        move: 'mousemove',
        up: 'mouseup'
      };
    }
  }

  App.prototype.onMouseDown = function(evt, elem) {
    var pos;
    this.dragging = true;
    evt.preventDefault();
    pos = eventToMousePos(evt, elem);
    return this.game.mouseDown(pos.x, pos.y);
  };

  App.prototype.onMouseMove = function(evt, elem) {
    var pos;
    if (!this.dragging) {
      return;
    }
    evt.preventDefault();
    pos = eventToMousePos(evt, elem);
    return this.game.mouseMove(pos.x, pos.y);
  };

  App.prototype.onMouseUp = function(evt, elem) {
    var pos;
    this.dragging = false;
    evt.preventDefault();
    pos = eventToMousePos(evt, elem);
    return this.game.mouseUp(pos.x, pos.y);
  };

  App.prototype.onPause = function() {
    return console.log('onPause');
  };

  App.prototype.onResume = function() {
    return console.log('onResume');
  };

  App.prototype.render = function() {
    this.context.clearRect(0, 0, this.width, this.height);
    this.context.setTransform(1, 0, 0, 1, 0, 0);
    this.game.render();
    FastCanvas.render();
    return requestAnimationFrame((function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
  };

  App.prototype.onImageLoaded = function(info) {
    this.pendingImages--;
    if (this.pendingImages === 0) {
      console.log('All images loaded. Beginning render loop.');
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    }
  };

  App.prototype.initGraphics = function() {
    var imageName, imageUrl, ref;
    console.log("initGraphics: window size " + window.innerWidth + ", " + window.innerHeight + ", " + window.devicePixelRatio);
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    this.canvas = FastCanvas.create(!window.cordova);
    this.context = this.canvas.getContext("2d");
    this.game = new Game(this.width, this.height, this.context);
    ref = this.game.images;
    for (imageName in ref) {
      imageUrl = ref[imageName];
      this.pendingImages++;
      console.log("loading image " + this.pendingImages + " '" + imageName + "': " + imageUrl);
      this.game.images[imageName] = FastCanvas.createImage();
      this.game.images[imageName].onload = this.onImageLoaded.bind(this);
      this.game.images[imageName].src = imageUrl;
    }
    return console.log("game created: " + (JSON.stringify(Object.keys(this.game))));
  };

  App.prototype.onDeviceReady = function() {
    var gameViewport, scale, viewportSettings;
    console.log('onDeviceReady');
    document.addEventListener(this.eventNames.down, this.onMouseDown.bind(this), false);
    document.addEventListener(this.eventNames.move, this.onMouseMove.bind(this), false);
    document.addEventListener(this.eventNames.up, this.onMouseUp.bind(this), false);
    gameViewport = document.getElementById('gameViewport');
    scale = 1 / window.devicePixelRatio;
    viewportSettings = "user-scalable=no, initial-scale=" + scale + ", maximum-scale=" + scale + ", minimum-scale=" + scale + ", width=device-width, height=device-height";
    console.log("viewportSettings: " + viewportSettings);
    gameViewport.setAttribute('content', viewportSettings);
    return setTimeout(this.initGraphics.bind(this), 0);
  };

  App.prototype.boot = function() {
    console.log('blackout boot()');
    if (this.isPhone) {
      document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
      document.addEventListener('pause', this.onPause.bind(this), false);
      return document.addEventListener('resume', this.onResume.bind(this), false);
    } else {
      return this.onDeviceReady();
    }
  };

  return App;

})();

app = new App;

app.boot();



},{"game":"game"}],"game":[function(require,module,exports){
var Game;

Game = (function() {
  function Game(width, height, context) {
    this.width = width;
    this.height = height;
    this.context = context;
    this.x = 100;
    this.y = 100;
    this.images = {
      logo: "img/logo.png"
    };
  }

  Game.prototype.render = function() {
    this.context.translate(this.x, this.y);
    this.context.rotate(Math.PI / 2);
    return this.context.drawImage(this.images.logo, 0, 0);
  };

  Game.prototype.mouseDown = function(x, y) {
    this.x = x;
    this.y = y;
  };

  Game.prototype.mouseMove = function(x, y) {
    this.x = x;
    this.y = y;
  };

  Game.prototype.mouseUp = function(x, y) {
    this.x = x;
    this.y = y;
  };

  return Game;

})();

module.exports = Game;



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
